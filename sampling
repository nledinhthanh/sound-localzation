#!/usr/bin/env python
#
# MCC 118 example program
# Read and save analog input values to a file
#
import sys
from daqhats import hat_list, HatIDs, mcc118, OptionFlags
import time

# Open a file for writing
filename = "/home/drigenser/Desktop/channel_data.txt"
with open(filename, 'w') as f:

    # get hat list of MCC daqhat boards
    board_list = hat_list(filter_by_id=HatIDs.ANY)
    if not board_list:
        print("No boards found")
        sys.exit()

    # Set up scan parameters
    channels = [4, 5, 6]
    channel_mask = 0
    for channel in channels:
        channel_mask |= 1 << channel
    scan_rate = 10000.0
    samples_per_channel = 1
    options = OptionFlags.DEFAULT

    # Read and save data from channels 4, 5, and 6 simultaneously
    for entry in board_list:
        if entry.id == HatIDs.MCC_118:
            print("Board {}: MCC 118".format(entry.address))
            board = mcc118(entry.address)
            board.a_in_scan_start(channel_mask, samples_per_channel, scan_rate, options)
            
            # Scan for 5 seconds
            data_strings = [""] * len(channels)
            start_time = time.monotonic()
            while time.monotonic() - start_time < 5:
                read_result = board.a_in_scan_read(samples_per_channel, 1.0)
                if isinstance(read_result, list):
                    timestamp = time.monotonic() - start_time
                    for i, channel in enumerate(channels):
                        if data_strings[i] != '':
                            data_strings[i] += ','
                        data_strings[i] += "{:.3f}".format(read_result[i][0])
                
                if board.a_in_scan_status() == 0:
                    break
                
            board.a_in_scan_stop()
            
            # Write data to file
            f.write("Timestamp, Channel 4, Channel 5, Channel 6\n")
            num_samples = int(scan_rate * samples_per_channel * (time.monotonic() - start_time))
            for i in range(num_samples):
                data_string = "{:.6f},".format(i * 0.001)
                for j, data_str in enumerate(data_strings):
                    if i < len(data_str.split(',')):
                        data_string += data_str.split(',')[i] + ","
                    else:
                        data_string += "NA,"
                f.write(data_string[:-1] + "\n")

