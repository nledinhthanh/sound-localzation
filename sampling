#!/usr/bin/env python
#
# MCC 118 example program
# Read and plot analog input values
#

import sys
import time
import matplotlib.pyplot as plt
from daqhats import hat_list, HatIDs, mcc118

# Set the sampling frequency and duration
sampling_frequency = 1000  # in Hz
duration = 15  # in seconds
num_samples = sampling_frequency * duration

# Get the MCC 118 board
board_list = hat_list(filter_by_id=HatIDs.MCC_118)
if not board_list:
    print("No boards found")
    sys.exit()
board = mcc118(board_list[0].address)

# Set up the plot
plt.ion()  # Turn on interactive mode
fig, ax = plt.subplots(board.info().NUM_AI_CHANNELS, 1, sharex=True)
fig.suptitle("Analog Input Channels")
ax[-1].set_xlabel("Time (s)")
for i in range(board.info().NUM_AI_CHANNELS):
    ax[i].set_ylabel(f"Ch {i}")

# Read and plot the data for each channel
x_values = []
y_values = [[] for i in range(board.info().NUM_AI_CHANNELS)]
start_time = time.monotonic()
while True:
    # Read the latest data from each channel
    for channel in range(board.info().NUM_AI_CHANNELS):
        y_values[channel].append(board.a_in_read(channel))
    # Update the time values for the x-axis
    x_values = [time.monotonic() - start_time - duration for i in range(num_samples)]
    x_values = x_values[-num_samples:]  # Keep only the last num_samples values
    # Plot the data for each channel
    for channel in range(board.info().NUM_AI_CHANNELS):
        ax[channel].clear()
        ax[channel].plot(x_values, y_values[channel], label=f"Ch {channel}")
        ax[channel].legend()
    plt.pause(0.001)

plt.ioff()  # Turn off interactive mode
plt.show()
